// Code generated by go-bindata.
// sources:
// examples/default/default.hs.js
// VERSION
// DO NOT EDIT!

package hotshell

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplesDefaultDefaultHsJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x58\xeb\x6e\x24\x39\x19\xfd\xbf\x4f\x71\xd4\x5a\x4d\x75\x27\xa9\xaa\x64\x34\xc0\x92\x61\x76\x01\x0d\x10\xd0\xc2\xae\x94\x41\x20\xcd\x0c\x2b\xb7\xeb\xeb\x2e\x13\x97\xed\xf5\xa5\x2f\xec\x84\x67\xe1\x59\x78\x32\xe4\xaa\xea\xba\xf4\x6d\x12\x89\xfe\x91\x56\xfb\xf2\x9d\xf3\x1d\x7f\x3e\xb6\x23\x3c\x55\xd3\x9f\x0a\x72\xfc\x16\xc9\x9d\xf6\xae\x24\x29\x93\xc7\x2b\x2c\x82\xe2\x5e\x68\x85\xe9\x0c\x3f\x7d\xf1\x05\x00\xac\x98\x85\x14\x2a\x6c\xf0\x06\xb4\x21\x3e\x4d\x82\x62\x15\x25\xb3\x4c\xa8\x82\x36\xdf\x2d\xa6\xc9\xb7\xb1\x3b\x99\xe1\x6b\xa4\x37\xdd\x9c\xb9\xd5\x6b\x47\x16\x6f\xda\xd9\xdf\x20\x71\xa4\x9c\x98\x4b\x4a\xdb\xbe\x04\xb7\x48\xb4\x21\x95\x34\x50\x43\x5a\x93\x77\xa5\x70\x10\x0e\x1d\x3d\x87\x82\x16\x2c\x48\x8f\x8a\x54\xb8\x42\x21\x9c\x91\x6c\x4b\x05\xd6\x25\x29\x28\x1d\xfb\x85\x12\x35\xff\x85\x90\x14\x67\x1b\xab\x57\xa2\xa0\x22\xfb\xa0\x26\x8f\xb3\xd7\x47\x70\x80\xb7\x5a\x25\x1e\x0f\x4a\xaf\xb1\x2e\x99\xef\x10\xe3\x7c\x36\xd7\xc1\xe3\x9b\x76\x76\x3f\xf9\x81\xb6\xb7\x48\x58\x72\x85\x36\xcc\x9d\xf0\xf1\x37\xbc\xc6\x92\x7c\xfc\xaa\x03\x0a\x3f\x39\x2e\xeb\x01\x8f\x11\x2a\xb8\xae\x2a\xa6\x8a\x54\x0a\x45\x60\xc6\x48\xc1\x59\x1d\xc1\x6b\xd0\x62\x21\xb8\x20\xe5\xe5\x16\x96\x38\x93\x12\x4c\x15\x70\x25\xb3\xb4\x9b\xe8\x46\x09\xef\xd6\x44\x28\x45\xf6\x2d\x55\x1a\x6f\xba\xf6\xf8\x99\x00\xc8\xf3\xdd\xdc\x9a\x97\xfb\xa0\x26\xb8\x3c\x18\x35\xcc\xde\x76\xd9\x27\x96\x9c\x67\xd6\x83\x19\xc6\x4b\x4a\xae\xc0\xab\xe2\x16\x89\x0b\x85\x86\x23\xbb\x12\x9c\xda\xbe\x97\x68\xc7\x26\x8f\xb3\xcf\x43\xb8\x1e\xc2\x6d\x15\x2f\xad\x56\xe2\x5f\x04\x2f\xaa\x3d\x90\x3c\x38\x9b\xbb\xb9\x50\xb9\xf2\xa6\x60\x9e\x60\xb4\x96\x99\xf2\x26\xd3\x76\x79\x12\xeb\x78\x6b\x9e\xc3\x85\x79\xac\xb2\x7a\x39\xad\x0e\x06\x52\x2f\x61\x49\x32\x4f\x45\xa7\xf1\xe7\xf9\xcb\x9e\x7f\x93\x7e\x8c\xe3\x0e\x76\xda\xf1\x40\xa7\x6a\x2d\x61\x9c\x93\x73\x99\xd4\xcb\x4e\x04\x49\xce\xe1\xf2\xf7\xc8\x57\xcc\xe6\x52\x2f\xf3\x56\xed\x7c\x30\xf6\x94\x08\x63\x1c\xea\x71\xc8\x5a\x6d\x9f\x06\xd3\x0f\x3d\x85\x52\xb7\x8f\xcb\xb1\xa8\x2b\x11\x93\x91\x1d\xc5\xc6\xe3\x02\x0d\xca\xf7\x12\x93\xfd\x80\xa3\xcd\xf4\x67\x52\xc1\x21\xee\x87\xda\x13\xa8\x40\x70\x42\x2d\xc1\xf0\x27\xb6\x62\xf7\xdc\x0a\xe3\xc1\xb5\x5a\x88\x65\xb0\xcd\xc6\x7a\x7b\xff\x6d\x86\xdf\x6d\x58\x65\x24\xe1\x76\xb0\xe1\xf7\x83\x47\x82\x8f\xb3\xe3\xb8\xb5\x69\x71\x4b\xcc\x93\x83\x2f\x09\x0b\x2d\xa5\x5e\x47\xe8\xba\x9c\xf6\xe3\xd2\x8a\xc9\x69\x97\xd6\xec\x44\x36\x1f\x14\xfe\xc6\x54\x6d\x2a\x92\x98\x55\xa8\xb4\xa5\xd6\x94\xf6\x66\x34\x6b\x58\xed\xf9\x52\x55\xfb\x52\x74\xda\xa1\x9d\x1a\xb6\xa4\x49\xbb\xb2\x3b\xb7\xbe\x44\x82\xd2\x7b\xe3\x6e\xf3\x7c\x29\x7c\x19\xe6\x19\xd7\x55\xfe\xcf\x20\x05\xa9\x4a\x87\x4a\x51\x5e\x76\x07\xc6\x19\xc2\x11\x37\x0a\xe0\x0c\xe3\x34\x67\xb6\xde\x49\x3a\xfe\x8d\xad\xc6\xd2\x4a\xe8\xe0\x1a\x55\xb4\x05\xf7\x56\x5e\xf2\xd8\xfd\x63\x10\xbd\x05\xef\x12\xdc\x21\xed\xa3\x00\x77\x6c\x15\xd5\xf5\x56\x87\xb9\x24\xac\x85\x2f\xe3\xec\x36\xc5\x9d\xa3\xd5\x36\xaa\x4d\x5c\x68\x77\xca\xcc\xcb\x3d\xd1\xca\x5a\xb4\xf6\x94\xa9\x59\x97\x24\xcd\x4e\xb0\xa4\x74\x48\xd3\xd8\x92\x9c\x26\xb7\x5b\x35\x47\x04\x6a\x4a\xcb\x41\x2f\x3a\x03\x39\x45\x85\xf6\xa8\x50\xf2\xd9\x53\xa4\x99\xb8\xee\x37\xef\x9a\x98\x2f\xc9\xe2\x45\xe3\x96\x07\xf3\x87\xfb\x73\x18\x82\xf7\x21\x78\x49\xfc\xa1\xce\xbc\x0d\xd6\xf9\x00\x0f\x56\x62\xed\xbd\xcd\x84\x4a\x06\x45\xb8\x1f\xec\xff\xe7\xdf\x27\x21\xfc\x20\x65\xe6\x79\x59\xf3\x8d\x00\xb1\xdc\xe6\xdb\x0e\xa6\xe9\x4c\x15\x6e\x10\xe3\x0f\x43\x1e\xd6\xf1\x01\xfb\xfb\xfb\x3b\x6c\x75\xb0\xa8\xb4\xf3\x68\x4c\x95\x8a\xfa\x6c\x23\x7b\x68\xe8\x27\xd9\x0e\x0e\x04\xa9\x39\x93\xa5\x76\xbe\x57\xc2\x95\xe8\x5b\xcf\xe4\xbc\xec\xa3\xfc\xc1\xd2\x06\xdf\x87\xb9\x14\x1c\xbf\xa9\x69\xe1\xaf\x7f\xf9\xe3\xdf\x47\x31\x15\xad\x83\x23\xfb\xeb\xa5\xa5\xcd\xbe\x9c\xa7\x72\x5f\x0c\x8e\x81\x42\xf8\x26\xf9\xb1\x63\xc6\x3b\xd6\x33\x52\x9f\xf7\x11\x57\xa2\xc2\xbf\xf3\x6c\xce\x5c\xf9\x83\xb1\x3a\x06\xea\x08\x1f\xeb\x3b\x23\xc5\x6f\x07\x3c\x2b\xc6\xdd\xc9\xb8\xc7\x7b\xcf\x44\x2e\xc7\x7c\x73\xf2\x3c\x8f\x0b\xe3\xc6\x95\xbb\xd7\x77\x26\xe0\xdd\x3e\xd5\x53\x21\x0f\x7a\x9f\xb0\x5e\xaa\x0f\xae\xc8\xaf\xb5\x7d\xc0\x0b\xb8\xad\xf3\x54\x21\x78\x21\x9f\xb1\x50\x83\xa5\x5f\x08\x55\xc0\xd3\xc6\x43\xec\xd6\xbb\xd3\x93\x97\x3a\x6e\xa7\xc9\xfb\x58\xb2\x31\xea\x47\xbc\x37\xcc\x7b\xb2\xea\x23\x26\xaf\x61\x89\x15\x90\x30\xaf\xb1\xb4\x64\x90\x5a\xb5\x76\xf8\x52\x22\x25\x7c\x69\xce\xe9\xa4\x77\xf8\xff\xfd\x4f\x6b\x41\xf5\xa6\x80\xd1\xd6\x1f\x81\x8f\xcd\x3d\xa0\x79\x0d\xce\x3c\x7e\x85\xbc\xa0\x55\xee\xb9\xc9\x6f\x5e\xfe\x22\xbb\xce\xae\xb3\x9b\xfc\x3c\x6c\x18\x7a\x55\xa3\x9b\x19\x19\x55\xfb\xf3\x68\x88\x51\x53\xfc\x74\x66\x7a\xd0\xd3\x62\xd4\x46\x12\xdc\xe0\x3a\x79\x64\xec\x20\xd7\x49\x29\x9c\xd7\x76\x3b\xc1\x27\xc4\x12\x46\x2a\xf0\xf2\xeb\x3a\x4b\x15\xa4\xc4\x27\xc4\x58\x13\x97\xff\x03\x17\xef\xaf\xd3\x5f\x7e\xbc\xc0\x45\x9e\xc7\xd1\x4e\x5b\x8f\x4f\x08\x4a\xfc\x88\x94\xef\x1a\x52\x65\xf1\x09\x25\xb1\x22\x19\xc1\x9e\x51\xc8\xf4\x0a\x99\xc6\x71\x84\x01\x2b\x0a\x1b\x5d\xe7\x05\x96\xa4\x77\xa5\x30\x3e\x28\xe2\x85\xe2\x36\xcf\x85\x11\x6a\xa1\x33\xa1\x9f\x25\xa1\x38\x2d\xa1\x50\xb1\xd8\xa8\xbe\xc9\x29\x6a\x2a\xdb\x19\xa2\xe2\xa4\x92\xeb\xf8\x36\x4b\xbf\x43\x2f\x5b\xcb\xcd\x92\x24\xe6\xc8\x65\x61\x1e\x94\x0f\xf5\xa5\xe7\xe6\x55\x76\xfd\x2a\x7b\x95\x37\x4d\x69\xfb\x33\x2d\xc8\x3d\x78\x6d\x52\x56\x15\x3f\x7f\x95\x09\xa7\x9f\xac\xdf\xc0\xb6\x4d\xbc\xb4\xd4\x0f\xe3\x68\xc8\x98\xf6\xf7\x1f\xe7\xb5\x99\x75\xfa\x8d\xc7\x3d\xf5\xa8\x8d\xa7\x12\x78\xb0\x96\x94\x47\x21\x2c\xf1\x58\x39\xd0\xaa\xde\x43\xf8\xea\xfa\xab\x9b\x1e\x61\xeb\x4b\xad\x90\x56\xb8\x17\xf1\x82\x72\xf7\xee\xdd\xf7\xf7\xf5\xb1\xd6\x8c\x7b\x82\xf7\x8c\x0e\xb5\xe5\xa9\x73\xe1\x49\x67\x22\x8b\x9b\xa2\xbe\x00\x14\x3b\xf7\xea\x43\x76\xaf\x10\x87\x54\xfa\xee\x11\xb2\x2b\xe3\x33\xe2\x0c\x1e\x4f\xf5\x13\x66\xf4\x6c\x79\xde\xeb\x66\x84\xf1\xc3\xb4\xf9\x97\x48\x64\x54\xf4\x8c\xf2\x8b\xec\xa2\x65\x15\x3d\xea\x67\xc9\x2c\x73\x46\x0a\x3f\x4d\x3e\xa8\x64\x36\xcb\x88\xf1\x72\xda\xab\x43\xf2\x0a\x62\xb3\x6f\xc9\x7b\x39\x88\xcd\x38\x85\x04\x97\x88\x13\xc7\xd4\x9b\xd6\x3d\x96\xe3\x25\x6c\xbf\x1e\x67\xff\x0b\x00\x00\xff\xff\xef\xe2\x58\x98\x06\x12\x00\x00")

func examplesDefaultDefaultHsJsBytes() ([]byte, error) {
	return bindataRead(
		_examplesDefaultDefaultHsJs,
		"examples/default/default.hs.js",
	)
}

func examplesDefaultDefaultHsJs() (*asset, error) {
	bytes, err := examplesDefaultDefaultHsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/default/default.hs.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _version = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x32\xd0\x33\xd6\x33\x00\x04\x00\x00\xff\xff\xdf\xf5\x1d\x2c\x05\x00\x00\x00")

func versionBytes() ([]byte, error) {
	return bindataRead(
		_version,
		"VERSION",
	)
}

func version() (*asset, error) {
	bytes, err := versionBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "VERSION", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"examples/default/default.hs.js": examplesDefaultDefaultHsJs,
	"VERSION": version,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"VERSION": &bintree{version, map[string]*bintree{}},
	"examples": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"default.hs.js": &bintree{examplesDefaultDefaultHsJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

