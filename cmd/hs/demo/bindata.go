// Code generated by go-bindata.
// sources:
// demo.css
// demo.js
// demo.tmpl
// item.tmpl
// DO NOT EDIT!

package demo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _demoCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\xcd\x6e\xdb\x30\x0c\xbe\xfb\x29\x88\x0c\xbb\x14\x51\x92\x36\x49\xb7\xba\x97\x01\xeb\x6e\x1b\x7a\xd9\x0b\xd0\x32\x9d\x09\xb1\x44\x43\xa2\xdb\x78\x43\xdf\x7d\xf2\x4f\x12\xb8\xcd\x21\x05\x1a\x03\x06\x64\xeb\xfb\x21\x3f\x51\xf3\x2b\xf8\xfd\xf8\xf0\x08\x85\x71\x39\x20\x3c\x63\x03\xc2\xe0\x49\xbc\xa1\x27\x02\xf9\x43\xa0\xb9\x64\x1f\xa0\xf0\x6c\xa1\x60\x6f\x51\x84\xfc\xfc\xb0\x9a\x6d\x18\xae\xe6\x49\x92\x71\xde\xc0\xbf\x04\xe2\x53\xb0\x13\x55\xa0\x35\x65\x93\xc2\xe4\x67\xad\x4d\x8e\xf0\x9d\x5d\xe0\x92\x26\x53\xf8\xc5\x0e\x35\x4f\xc1\xb2\xe3\x50\xa1\xa6\xfb\xe4\x25\x49\x66\xb4\x23\x5d\x0b\xe5\x4a\xdb\x7c\x10\xea\xac\x53\xf8\xb4\xfc\x72\xbb\xc6\xd5\x7d\xf7\xcf\xa2\xdf\x18\xa7\x32\x16\x61\x9b\xc2\xcd\xba\xda\xf5\x7c\xd4\x62\x9e\x48\x59\x72\xf5\x14\x66\x15\x7a\x8a\x55\xec\xbf\x62\xf1\x95\xbc\x52\xd5\xab\xbb\x62\x71\x7b\x24\xc7\x02\x0f\xd0\xb8\x30\x42\x36\x0c\x94\xc1\x54\xb8\x4a\xe1\xfa\xe0\xb8\xa5\x26\xe2\xde\x96\xbb\xa2\x3b\x5c\xe8\x1e\xd3\xaa\xa8\x9c\x82\x1e\x21\xf7\x82\x25\x15\x12\x15\x17\xad\x22\xbc\x6a\x62\x80\x0a\xed\x24\x0a\x68\xf6\xd8\x96\x98\x42\xed\x72\xf2\xa5\x71\x43\x6c\x62\x2c\x8d\xfd\x37\x9e\x9a\x7e\x6f\xe8\xfe\x44\xb2\x27\xfc\xcf\x22\xec\x63\x3f\x86\x10\x24\xe7\x5a\x4e\xe4\xb4\xec\xbb\x7a\xcb\x5d\x1e\xec\xb2\xd8\xc6\xd6\xb8\x8d\xd2\xb5\x0f\xec\x3b\x91\x7d\x88\x37\x3f\x96\x0f\xab\xaf\xad\x80\x7a\xa6\x6c\x6b\x44\xa1\x33\x76\xc8\xe0\x3a\x40\xc7\x85\x20\x54\x29\x8a\xb3\x6b\x5c\x1c\xe1\x18\x76\x47\xb0\xfc\xf7\x3d\xe8\xf0\x0e\x30\x9f\x8f\x3d\x13\x18\x83\xf8\x16\x27\xa9\xf0\x68\x29\xc0\xa4\xc3\x4d\xba\x28\xda\x2b\x37\x6d\xef\xe3\xe8\x78\xc5\xa3\x0b\xfd\x78\xb7\x2e\x2f\xf1\x5d\x2f\x3e\x8f\x31\x59\x89\x7a\xdb\xef\xb6\xf2\x5d\x20\x47\x8f\xbe\x94\x8f\x75\x18\xce\xe8\xe2\x8d\x84\x8b\x5b\xf0\x45\x1d\xfe\x07\x00\x00\xff\xff\xe8\x4b\x51\xf4\x71\x05\x00\x00")

func demoCssBytes() ([]byte, error) {
	return bindataRead(
		_demoCss,
		"demo.css",
	)
}

func demoCss() (*asset, error) {
	bytes, err := demoCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "demo.css", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _demoJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x57\xdb\x6e\xe3\x36\x13\xbe\x5e\x3f\xc5\xfc\xc6\x8f\x95\x84\xc6\xf2\xee\xad\x63\x3b\xd8\x66\x0b\x24\xe8\xa6\x05\x9a\xed\x55\x10\x04\xb4\x44\x5b\x42\x74\x02\x49\x25\x31\x14\xbd\x4b\x9f\xa5\x4f\xd6\x19\xea\x44\x1d\xdc\x64\xeb\x0b\x45\xe2\x0c\x67\x3e\xce\xe1\xe3\xe4\x89\x09\xb8\x56\x3c\x86\x0d\xfc\xc1\x99\xa7\x5c\x4f\x70\xa6\xf8\x65\xc4\xa4\xb4\x8b\x19\x80\xe0\x89\xcf\xc5\x0a\xf6\x79\xe2\xa9\x30\x4d\x6c\x07\x68\x99\x04\x2a\x17\x09\xac\xfd\xf0\x09\x3c\x52\xff\x8d\xc5\x7c\x33\x0f\xd1\xd8\x7c\xab\x35\xe8\xb7\x96\x19\x4b\x0c\xb9\xf5\xc8\x8f\xd6\xb6\x50\x41\x28\xdd\x4c\xa4\x99\x74\x69\xc3\xaf\xfc\x58\xae\x97\xa4\x7a\x7a\xe7\xc4\x1e\xd8\x6c\xc0\xb2\xe0\xf5\x15\x06\x32\xd7\xe7\xd2\xab\xa5\x17\xf4\x58\x81\x45\xeb\x0b\x5a\xb7\x4a\xf0\x59\x72\xe0\x22\xcd\x65\x74\xbc\xe5\xea\x3a\x49\xb8\xb8\xfa\x7e\xf3\x6d\x53\x14\x0f\x0f\x81\x8a\xa3\xd5\xa4\xc1\xb2\xdc\xbe\x05\xd2\xf2\x62\xdf\xfa\x0f\xe6\x71\x5b\x0d\xf7\xe3\xc7\x91\x90\x1e\xd2\x8d\x78\x72\x50\x01\x6c\xe1\x13\x1d\x69\x4b\x67\x9a\xb0\x32\xc0\xb8\x5e\x62\x7a\xb6\xe7\xf8\x5e\xce\x4a\xe7\x7c\x36\xa3\x7c\xdf\xf0\x24\xff\xf1\x7c\xd3\x4e\x8d\x04\xb7\x4e\x23\x8c\x59\x66\xb7\xdb\x78\xd4\x6c\x04\xf8\xd0\xd4\x8a\xae\xb4\x3a\x79\x9b\x82\x47\x2e\x56\x43\xa9\x17\xf4\x17\xbd\x94\xcb\x0a\x79\xe9\xcc\x5a\xb7\x4a\xb0\x30\xfa\x56\x9d\xbf\xe7\x5c\x0b\xea\xc8\xf4\xb5\xa7\xf4\x7a\xf8\xc8\xd7\x19\x84\x2f\x4e\xd1\x26\x53\x9f\x50\x7e\x41\xf9\x13\xc7\xfd\xe1\x0b\xa5\xc4\xf4\xbd\x80\xcf\xad\xf2\x74\xf9\x17\xed\x7e\xcc\x11\xd3\x6f\x8b\x18\xc3\x8d\xd9\xfa\xfb\x2f\x2b\x63\x18\x5d\x55\x2d\x94\xf0\x48\x31\xd0\xe1\xa3\x28\x6c\x8b\xae\xce\xaa\xac\xf5\xc2\x50\xbb\xb3\x6b\xff\xc3\xae\x23\x93\x46\xd7\x15\x1a\x75\xd9\x95\xe9\x44\x93\xca\x79\xe5\x52\x9a\xee\xa6\x94\x99\x0e\x18\xaa\x0f\x8b\x7d\x8e\xb8\xe7\x5b\x5c\xf4\xf8\x8e\x89\xba\xec\x60\xc7\xbc\xc7\x37\x2c\x62\x52\xe2\x4c\x19\x78\xe9\x77\x01\x66\x87\xe7\x92\x8b\xcb\x20\x0d\x3d\x8a\xe4\xf4\x3a\x46\x74\xd4\x7e\xbb\x28\x4c\x1e\xc3\xe4\xb0\xf0\x72\x21\x53\x61\x6d\x5f\x6b\x58\x46\x2c\x4c\x6c\xc6\x87\x33\xd1\x25\x97\x69\xa2\x44\x1a\x45\x5c\x9c\xec\x97\x03\x35\x78\xa8\x42\x16\xdd\x2a\x14\x9c\x26\xca\x42\x97\x03\xaa\xf8\xd4\x05\x72\x05\x77\x3a\xfc\xa3\x2e\x3e\xab\x4a\x0e\xe5\x03\xc1\x7d\x79\x5f\x6a\x8c\x67\xf8\x08\x58\xe2\x47\xfc\xcf\x36\x1a\x86\xdf\x2e\x44\x84\x40\x43\x08\xf7\x60\x2c\x57\x4c\xe3\xd4\xc0\xba\x36\xc3\x33\xa9\x2f\x26\xc8\xa6\x89\x24\x9d\xcc\xed\xe3\xbf\x3b\x29\x69\x98\x0a\xbb\xe5\x7e\x36\xea\xca\x91\x93\xba\x39\x65\x84\xc8\x6c\xa7\xd5\x4f\xf8\x8b\x22\xf1\x29\xfc\x60\x75\xfc\x52\x29\x98\x64\x40\x2a\x9f\xdb\x13\x36\x5a\x95\x46\x96\x66\xb5\x1f\xfa\x35\x7e\xa0\x6e\xf5\xbb\x9e\x19\x7d\x86\x46\xd5\x44\x00\x56\x53\xf7\x56\xd5\xa7\xc0\x23\xc9\x0d\x44\x86\xdd\x07\x77\x1f\x26\xbe\x3d\x3e\x79\xc7\x9d\x67\x30\x49\x9c\x3d\xaa\xa9\xe8\x92\x4e\xd6\x01\x69\xf5\x4a\xa7\x17\x8b\xce\x3b\x6a\x23\xa1\x23\x00\xee\x8f\xe2\x61\x60\x6c\x5e\x35\x9c\x49\x53\xfa\x8e\xfa\x5f\x55\x39\x7d\x7c\xa7\x2b\x21\xcb\x65\x60\xd7\x65\xde\xd8\x31\x90\x0e\x30\x4c\x07\xa8\x3b\xe2\x30\xc4\x46\x4a\xc9\x4f\x63\xa9\xb3\x5f\x35\x7d\x59\x15\xe1\xd8\x7a\x2f\x9f\x46\x4c\x67\x3f\x7e\xa8\xb6\x69\x2b\xe2\x75\x0c\x13\x5c\x69\x62\xb0\x47\xfd\x7f\xd2\x43\xc3\xf9\xcf\x58\x35\xe9\xb3\x2b\x3d\xa2\xa0\xef\xa9\xfd\xe9\xcc\x4f\xbd\x1c\xa9\x5e\xb9\xbb\xd4\x3f\xd6\x82\x2b\x1e\x1e\x02\xe5\xb4\xcc\xe0\x21\xb7\xa6\x09\x2a\x7d\x0d\xfd\x9b\x34\x4f\x94\xdd\x5e\x71\xd4\x57\x92\x47\xfb\xba\xaf\xeb\xd5\xbe\xd1\x34\xc1\x22\xcb\x04\x97\x74\xcf\x77\x45\x69\x5c\x93\x64\xc1\x1d\xf2\x8f\x7d\xab\x04\xf2\xae\xbb\x47\x6a\xbf\x0c\x98\xb8\x4c\x7d\x6e\x73\xf7\x39\x08\xbd\xc0\x69\x32\xd2\xd1\xd7\xe4\x94\x31\x3d\x66\x4c\xe6\xe0\xcd\x51\xa3\x9e\x26\x8c\xc1\xea\xa2\xd1\xa0\xc7\x5a\xcf\x40\x3a\x59\x7a\xf2\xa8\xd2\x36\x98\x44\x8c\x9a\xd0\x8b\xdd\x27\x0e\x29\xb0\xea\xd9\x33\xee\x94\x0f\x4d\xa0\x06\xd7\x9e\xc5\x5f\xb8\x97\xe3\x11\x16\xef\x1c\x12\xad\xe5\x2e\x4c\x96\x3b\x26\x91\x87\x3c\x64\xbc\x9f\xcc\x53\xe9\x41\xef\x3d\x5e\xa5\xf2\xd3\x5c\x59\x23\x3d\xfa\xd9\x2a\xe0\x80\xd2\x2c\x57\x90\xee\x81\xbe\xb0\x7c\x62\xcc\x2d\x3c\xa7\x79\xe4\xc3\x8e\x83\x1f\xca\x2c\x62\x47\xee\x43\xc0\x05\x77\x46\xee\xfa\x57\xfd\x60\xa9\xec\x08\x5d\x85\x31\xf5\x59\x9c\x52\xad\xd9\x8e\xbb\x4f\x45\xcc\x94\x6d\x5d\x5d\xad\xe2\xd8\xd2\xf5\xfb\xae\x31\xa7\xbb\x93\xe7\xfd\x09\x63\x3c\x9f\x90\x4b\x9c\x72\xe8\x4f\xf3\xef\x05\xfc\x1f\x02\x09\x8b\x3d\xb8\xcb\x62\x1f\x22\xcb\x33\x2d\xeb\x8f\x2b\x3b\xb1\x34\x66\xa9\x6a\x48\xfa\xf7\x81\x41\xcf\x06\x5f\x7f\xbf\x71\xab\xc2\x26\xfc\xeb\xc1\x00\x51\xd5\x56\x55\x58\xcb\x2d\x35\x41\xdb\x78\x38\x43\xfc\x12\x71\x7a\xfd\xf9\x78\xed\xdb\x96\x87\xbb\x18\x32\xb6\xb0\x9c\x99\x73\xfe\x4f\x00\x00\x00\xff\xff\x28\xdf\x9a\xb3\xa3\x0d\x00\x00")

func demoJsBytes() ([]byte, error) {
	return bindataRead(
		_demoJs,
		"demo.js",
	)
}

func demoJs() (*asset, error) {
	bytes, err := demoJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "demo.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _demoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\x4f\x8f\x9b\x30\x10\xc5\xef\x7c\x0a\xd7\x97\x9c\xb0\xf3\xa7\x55\xa3\x0a\xb8\x24\x8d\xda\x5e\xda\x43\x7a\xe8\xd1\xd8\x13\xe1\xc8\xc6\xc8\x9e\xa4\x89\x22\xbe\xfb\x9a\x18\x76\x57\xda\x2b\x5c\x46\x33\x1e\xde\xef\x21\x3f\x8a\x4f\xfb\xdf\xbb\xe3\xbf\x3f\xdf\x49\x83\xd6\x54\x59\x31\x15\x10\xaa\xca\x48\x7c\x0a\x0b\x28\x88\x6c\x84\x0f\x80\x25\xfd\x7b\x3c\xe4\x5b\x4a\xf8\x78\x88\x1a\x0d\x54\x3f\x1c\x86\x06\x8c\x21\x0a\xac\x23\x39\x79\x3c\xd8\x4f\x04\xcb\xf6\x10\x64\xdf\x17\x3c\x6d\xa5\x37\x82\xf4\xba\x43\x12\xbc\x2c\x69\x83\xd8\x85\x6f\x9c\x4b\xd5\x9e\x03\x93\xc6\x5d\xd4\xc9\x08\x0f\x4c\x3a\xcb\xc5\x59\xdc\xb8\xd1\x75\xe0\x1e\x84\x44\xbe\x64\xab\xcf\xec\x6b\x6a\x98\xd5\x2d\x3b\x07\x5a\x15\x3c\xe9\xcd\x29\x9e\x2b\x67\x67\x04\xd4\xa2\x06\x93\x4b\xe7\x81\x7f\x61\x5b\xb6\xde\xf0\xda\xbb\xff\x01\xfc\x8c\x8c\x4b\xab\xc0\x87\x81\x11\x05\xf9\x2a\x62\x36\xef\x66\xf9\x7c\x20\xeb\x2c\xb4\x38\x40\xd6\x6c\xb5\x66\xcb\x69\xf0\x91\x30\x22\xf0\x1e\x6f\x3e\xe6\x61\x17\xc2\x90\x84\xd4\x67\x05\x4f\x01\x2b\x6a\xa7\xee\xb1\x28\x7d\x25\x5a\x95\x54\xba\x16\x85\x6e\xc1\x0f\x4a\x71\x18\x8f\x5e\xf5\xae\xc2\x13\x1d\x53\x45\xca\x98\xaf\x58\x3b\x23\x10\x08\x1d\x46\x94\x3c\xf3\xd6\xf7\xcf\xa5\x93\x36\xd0\x0a\x0b\x71\x71\x11\xc9\x87\xb1\xed\xfb\x45\x96\xbd\xf9\x9b\xbe\x1e\xef\x1d\x94\x14\xe1\x86\xe9\xa6\xe8\xe0\xf6\x57\x32\x3b\xad\xf2\xd1\x26\x7f\xfe\x1d\x2f\x01\x00\x00\xff\xff\x27\x72\x5c\x2e\x34\x03\x00\x00")

func demoTmplBytes() ([]byte, error) {
	return bindataRead(
		_demoTmpl,
		"demo.tmpl",
	)
}

func demoTmpl() (*asset, error) {
	bytes, err := demoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "demo.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _itemTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xb1\x0a\xc2\x30\x10\x86\xf7\x3c\xc5\x51\x84\x2e\x25\x0f\x10\x70\xd2\x45\x1c\x1d\xc5\x21\x34\xa7\x04\x4d\x10\x9b\xa5\x9e\xf7\xee\x5e\x2e\x0a\x1d\xfa\x2f\xc9\x71\x1f\xdf\x9f\x10\x05\xbc\xc6\x8c\xd0\xc5\x82\xa9\x63\x36\x64\x40\x12\x70\x1a\x1d\xf4\x44\x76\x2f\x37\xf8\xc0\xc9\xe7\x58\xe2\x1b\x99\xfb\x41\x89\x31\x85\x06\xec\x52\x58\xdb\x57\xdf\xe4\xe0\xac\x43\x0d\xd1\xcb\xe7\x1b\xc2\xa6\x6e\xc0\x6d\xc1\x1e\x2a\x22\x95\xb0\x08\xdd\x71\x56\xaf\x62\xf6\x88\x73\x35\xaa\xcd\x89\x42\x8e\xe7\xc3\x97\xff\x7b\x9b\x8c\x99\x87\x45\x0d\xe6\xf0\x93\x5e\x8c\xfc\xa7\xcd\xdf\x00\x00\x00\xff\xff\xef\x4c\xe8\xcf\xe9\x00\x00\x00")

func itemTmplBytes() ([]byte, error) {
	return bindataRead(
		_itemTmpl,
		"item.tmpl",
	)
}

func itemTmpl() (*asset, error) {
	bytes, err := itemTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "item.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"demo.css": demoCss,
	"demo.js": demoJs,
	"demo.tmpl": demoTmpl,
	"item.tmpl": itemTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"demo.css": &bintree{demoCss, map[string]*bintree{}},
	"demo.js": &bintree{demoJs, map[string]*bintree{}},
	"demo.tmpl": &bintree{demoTmpl, map[string]*bintree{}},
	"item.tmpl": &bintree{itemTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

