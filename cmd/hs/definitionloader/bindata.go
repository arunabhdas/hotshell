// Code generated by go-bindata.
// sources:
// ../../../examples/default/default.hs.js
// DO NOT EDIT!

package definitionloader

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ExamplesDefaultDefaultHsJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x58\xfd\x6e\xd4\x46\x10\xff\x3f\x4f\x31\x3a\x21\x7c\x97\x60\x3b\x41\x69\x4b\xa1\x40\x5b\xd1\x36\xad\x68\x41\x0a\x55\x2b\x01\x45\x7b\xf6\xdc\x79\x1b\x7b\xd7\xec\xae\xef\xa3\x90\x3e\x4b\x9f\xa5\x4f\xd6\xd9\xf5\xb7\xef\x7c\x24\x52\x03\xe2\x72\xfb\xf1\x9b\xd9\xdf\xcc\xfe\x66\x96\x15\x53\xc0\x0d\x66\xf0\x18\x14\xbe\x2f\xb8\xc2\xa9\x97\x48\xa3\x13\x4c\x53\x6f\x16\xd8\xa9\x23\xbb\x06\x37\x18\x8d\xac\xb1\x53\x6e\xcd\xbb\xee\x82\x42\xc4\xa8\x74\x24\x15\x7a\xb3\xa3\x23\x8b\x33\xfd\x10\xa3\x8e\x1e\x82\x77\x51\xef\xbd\xbe\x07\x8b\x42\x44\x86\x4b\x01\xd3\x19\x7c\x38\x3a\x02\xfa\xb1\x50\x29\x17\xc5\x86\xe0\x2c\xb6\xc5\x62\x19\x5a\x6f\x08\x73\xf3\x62\x31\xf5\x9e\xdb\x69\x6f\x06\x4f\xc0\x3f\x6b\xf6\xcc\x95\x5c\x6b\x54\xb4\xab\xdc\xfd\x14\x3c\x8d\x42\xf3\x79\x8a\x7e\x35\xe7\x01\x99\x97\x39\x0a\xaf\x34\xd5\x75\x6b\xf2\x2a\xe1\x1a\xe8\x6f\xe3\x9e\x86\x18\x17\xac\x48\x0d\x64\x28\x8a\x7b\x10\x73\x9d\xa7\x6c\x8b\x31\xac\x13\x14\x20\xa4\x9d\xe7\x82\x3b\xff\x17\x3c\x45\xbb\x3b\x57\x72\xc5\x63\x8c\x83\x37\x62\x72\x3d\x7b\xb4\xc7\x0e\xc0\x33\x29\x3c\x03\x57\x42\xae\x09\x89\x99\xc6\xa2\xdd\xcf\xe6\xb2\x30\xf0\xb4\xda\xdd\x6e\xbe\xc2\x2d\xf9\xce\x3c\x72\xa3\x84\xb9\xe0\xc6\x7e\x07\x23\x61\x89\xc6\x7e\x38\x40\x6e\x26\xfb\x69\xdd\xf1\xa3\x67\x15\x22\x99\x65\x4c\xc4\x3e\x71\x87\xc0\xf2\x3c\xe5\x11\x73\x08\x04\x8c\x8b\x05\x8f\x38\x0a\x93\x6e\x29\xc0\x11\xa3\x3d\xb4\x14\x74\xc2\x14\xd6\x1b\x75\xef\xc0\x75\x4c\xb8\x10\xa8\x9e\x61\x26\xe1\x71\x33\x6e\x7f\x88\x04\x08\xc3\x7a\xaf\xf3\x4b\xd3\x7e\x38\xd9\x59\xd5\x3d\xbd\x6a\x4e\xef\x29\xd4\x86\x29\x43\x9e\xb2\x28\x41\x1a\x8f\xb2\x98\x86\x75\x11\x4b\xa0\x40\xaf\x78\x84\xd5\xdc\x7d\xa8\xd6\x7a\xd7\xb3\x4f\x9b\xd0\xad\x09\xbd\x15\x51\xa2\xa4\xe0\x7f\x21\x18\x9e\x0d\x8c\x84\x85\x56\xa1\x9e\x73\x11\x0a\x93\xc7\xcc\x20\xe4\x52\xa6\x01\x7d\x09\xa4\x5a\x8e\xda\xda\x3f\x4a\x54\xe8\x62\x6e\xb3\xcc\x85\x53\xc9\x22\x87\x54\x2e\xc9\xf3\x94\x90\xe3\x86\xe3\x4f\xfb\x9f\xb6\xfe\x97\xc7\xb7\x38\x7a\xe7\xa6\xed\x07\x1a\xcb\x35\x8f\x45\x11\x6a\x1d\x10\x54\x43\x42\x4a\x03\x70\xf2\x3d\x84\x14\xe6\x90\x26\xc2\x8a\xed\xb0\xb3\x76\x8c\x84\xbe\x1d\x6c\xed\xa0\x52\x52\xdd\xcc\x4c\xbb\x74\xcc\x8a\x1b\xef\xa7\x63\xec\x32\x11\x26\x3d\x39\xb2\x83\xfb\x09\xea\xa4\xef\x09\x41\x0e\x00\x7b\x97\xe9\x67\x8a\x1d\x5d\x23\xba\x0f\x4e\x13\x28\x66\x85\xe6\x62\x49\x17\xeb\x27\xb6\x62\x97\x91\xe2\xb9\xa1\x30\x8a\x05\x5f\x16\xaa\xbc\x58\xcf\x2e\x9f\x07\xf0\xdd\x86\x65\x39\x29\xc7\xc3\xce\x85\x1f\x82\x5b\x07\xaf\x67\xfb\xed\x3a\xd1\x8a\x14\x52\x9a\x68\x30\x14\xee\x85\x4c\x53\xb9\xb6\xa6\x5d\x3a\x0d\x71\x71\xc5\xd2\x69\x73\xac\xd9\xc8\x69\xde\x08\xf8\x8d\x09\x27\x2a\x29\x32\x25\x20\x23\x1d\xaf\x44\x69\xb0\xa3\x8c\x61\x36\xd0\xa5\xcc\xe9\x92\x55\xda\xae\x9c\xe6\x6c\x89\x93\x2a\xb2\xb5\x5a\x9f\x80\x07\x89\x31\xb9\x7e\x18\x86\x4b\x6e\x92\x62\x1e\x50\xb6\x87\x7f\x16\x29\x09\x4e\x26\x8b\x4c\x60\xd8\x14\x9b\xeb\x03\x0e\x5b\xbb\x96\x00\x4d\x09\x82\x73\x0a\xb6\xbd\x49\xd2\xfe\x6b\x47\x73\x85\x2b\x2e\x29\x44\x8e\x15\xa9\x20\x32\x2a\x3d\x89\xec\x34\x15\xac\x56\x82\xeb\x03\xd6\x96\x86\x56\x00\x2e\xd8\xca\xb2\x6b\xe8\x92\x52\x65\x81\x35\xf9\x6c\x77\x57\x47\xac\x15\xcd\xc9\xa8\xcc\x6d\xa0\xf5\x98\x98\x27\x03\xd2\x12\x47\x5a\x55\x65\x9c\xd7\x04\x9a\xd7\x84\x79\x89\x06\xdf\xb7\x23\xde\xb8\x73\x75\xd4\x34\x22\xd5\x4e\x97\x5a\x1a\xe4\xa2\x11\x90\x31\x57\x70\xe0\x0a\x7a\x9f\xac\x22\xe5\xc6\x75\x7b\x79\xd7\x94\x84\x09\x45\xf4\x6e\xa9\x96\x3b\xfb\xbb\xf7\xb3\x0b\x11\xb5\x10\x74\xb3\xa3\x2b\x77\xf2\x0a\xac\xd1\x81\xa8\x50\x29\xac\x8d\x51\xd4\x04\x78\x9d\x24\x1c\x82\xfd\x7f\xfa\x3d\x6a\xc2\x74\x8e\xcc\x4c\x94\x38\x7f\xad\x01\x9b\x6e\xf3\x6d\x63\xa6\x9c\xf4\x05\x9c\x81\xc5\xef\x42\xee\xe6\xf1\x8e\xf7\x97\x97\x17\xb0\x95\x85\xa2\xab\xa7\xa9\xcc\x39\x51\x25\x55\xb1\xb5\x8d\xfa\xaa\x9b\xb3\xdb\x29\x08\xa9\xa4\xd2\x9d\x10\x5c\xcb\x84\x4e\xa0\x1d\x3d\x70\xe6\x65\x8b\xf2\x83\xc2\x0d\xbc\xa4\xdc\xe7\x11\x7c\xe3\xdc\x82\x5f\x7f\xf9\xf1\xf7\x1e\xa6\xc0\x75\x41\x9e\x7e\xbd\xa4\xb5\x43\x3a\xc7\xce\xbe\xe8\x94\x81\x98\x72\xd0\x1d\xbe\xaf\x98\xb6\xc7\xba\xc5\xd1\xe7\x2d\xe2\x8a\x67\xf0\x77\x18\xcc\x99\x4e\xde\x51\x87\x66\x81\x1a\x87\xf7\xcd\x1d\xa0\xe2\xdb\x8e\x9f\x19\x8b\xf4\x28\xee\xfe\xd9\x03\xc8\x49\xdf\xdf\x10\x4d\x14\xda\xc0\xe8\x7e\xe6\x0e\xe6\x0e\x00\x5e\x0c\x5d\x1d\x83\xdc\x99\xbd\x41\xbc\x44\x0b\x2e\xd0\xac\xa5\xba\xa2\x9b\xaf\xb7\xda\x3e\x26\x0a\xc3\xd3\x5b\x04\xaa\x13\x7a\xaa\x9d\x31\x18\xdc\x18\xaa\xbd\x55\xbc\x1b\x3e\xa3\x44\xda\xeb\x34\x79\x6d\x53\xd6\xa2\xbe\x85\xd7\x39\x33\x06\x15\xfd\x36\x79\x44\xdd\x12\x23\xe1\x85\xfc\x11\x75\x50\x98\x83\xaf\xc4\x5a\xc3\x9d\x14\x7c\x84\x3b\xf9\x21\x9e\x64\x6d\xff\xdf\x7f\x2a\x09\x72\x97\x82\x14\x41\x99\x3d\xe6\xed\x70\x6b\x90\xcc\x91\x37\xf0\x15\x84\x31\xae\x42\x13\xe5\xe1\xd9\xfd\x2f\x82\x53\xfa\x73\x16\x1e\x36\x5b\x74\xb5\xaa\xe4\x2d\xef\x09\x55\xf5\x75\x2f\x44\x6f\xc8\xfe\x34\x62\xba\x33\x53\xd9\x70\x42\x52\xe8\x4e\x3b\xb9\x67\x6d\xe7\xac\x13\x6a\x2d\x8c\x54\xdb\x09\x7c\x04\x9b\xc2\xe0\x73\xb8\xff\xc4\x9d\x52\x14\xf4\x04\xf8\x08\x16\x6b\xa2\xc3\x3f\xe0\xf8\xf5\xa9\xff\xe5\xdb\x63\x38\x0e\x43\xbb\x5a\x13\x41\xf4\x51\x08\xfe\x1e\xfc\xa8\x1e\xf0\x85\xa2\x5f\x13\xe2\xcc\xeb\x99\x3d\xc0\x50\xde\x32\x94\x97\x8a\xc3\x73\x60\x71\xac\xac\xea\xdc\xa5\x77\x8f\xac\x53\xa1\x5f\x28\x6c\x43\x41\xfd\x04\xcf\xb9\x58\xc8\x80\xcb\x5b\x51\xc8\xc7\x29\xe4\xc2\x26\x1b\xba\x4e\x4e\x60\x99\xd9\x3a\x47\x8c\x47\x99\x5c\xdb\xb7\x99\xff\x02\x5a\xda\x2a\xdf\xa8\xb5\x47\xa6\x51\x07\xc5\xbc\x10\xa6\x70\x4d\xcf\xd9\x79\x70\x7a\x1e\x9c\x87\xe5\x90\x5f\x7d\xf5\xc9\xf8\x95\x91\xb9\xcf\xb2\xf8\xf3\xf3\x80\x6b\x79\x63\xfe\x3a\xb2\x9d\xdb\xa6\xc5\x3d\x8c\xad\x20\xc3\xb4\xed\x7f\x28\xc8\xf9\xac\xe1\xaf\xbf\xee\xa6\xa5\xd6\x56\x25\x20\xea\x15\x3d\x12\xa9\x83\xa1\x47\xa2\xcd\x1c\x20\x7a\xec\x65\x81\x07\xa7\x0f\xce\x5a\x0b\x5b\x93\xd0\x84\x9f\xc1\x25\xb7\x0d\xca\xc5\xab\x57\x2f\x2f\x5d\x59\x2b\xd7\xdd\x40\x7b\x7a\x45\x6d\x39\x56\x17\x6e\x54\x13\x99\xbd\x14\xae\x01\x88\x6b\xf5\x6a\x21\x9b\x57\x08\xb5\x5e\xa9\x69\x1e\x21\x75\x1a\x1f\x20\xa7\xf3\x78\x72\x4f\x98\xde\xb3\xe5\x76\xaf\x9b\x9e\x8d\x77\xd3\xf2\xbf\x44\xac\x47\x71\xeb\x51\x78\x1c\x1c\x57\x5e\x59\x8d\xfa\xcc\x9b\x05\xd4\x45\x72\x33\xf5\xde\x08\x6f\x36\x0b\x90\x60\xa7\x2d\x3b\x98\xde\x03\xbe\x19\x4a\xf2\xe0\x0c\x7c\xd3\x3f\x82\x47\xbd\xba\xdd\xd8\x77\xbd\x1c\x1d\x78\xd9\x0f\x61\xf5\x71\x3d\xfb\x2f\x00\x00\xff\xff\x8e\x0e\xa8\xdd\x6d\x12\x00\x00")

func ExamplesDefaultDefaultHsJsBytes() ([]byte, error) {
	return bindataRead(
		_ExamplesDefaultDefaultHsJs,
		"../../../examples/default/default.hs.js",
	)
}

func ExamplesDefaultDefaultHsJs() (*asset, error) {
	bytes, err := ExamplesDefaultDefaultHsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../examples/default/default.hs.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../examples/default/default.hs.js": ExamplesDefaultDefaultHsJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"examples": &bintree{nil, map[string]*bintree{
					"default": &bintree{nil, map[string]*bintree{
						"default.hs.js": &bintree{ExamplesDefaultDefaultHsJs, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
