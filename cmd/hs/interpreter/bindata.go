// Code generated by go-bindata.
// sources:
// dslrunner.js
// DO NOT EDIT!

package interpreter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dslrunnerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x6e\x83\x30\x10\xbc\xfb\x2b\xe6\x86\x11\x11\x1f\x50\x89\x63\x2b\xf5\xdc\x63\x14\x55\xce\xd6\x04\xab\x89\x83\xfc\x88\x5a\x45\xfc\x7b\x65\x6c\x8c\x41\xe5\xc6\xee\xcc\x78\x66\xf6\x21\x0c\x94\x93\x37\x8b\x0e\xc7\x13\x0b\xbf\xe4\x8d\x91\xda\xa1\xc3\x73\xde\xbc\x44\xc0\xc4\x58\xef\x35\x39\x75\xd7\xf3\x80\xd3\x5d\xf7\xea\x72\x00\x89\xeb\xf5\x2c\xe8\xbb\xc6\x93\x31\x00\x58\x61\x5a\xb9\x0f\x7f\x7e\x0f\x74\x1e\xd6\x48\x5f\xa4\xb6\xc5\xc3\x61\x3a\xed\xe8\x46\x92\x37\x56\x6e\x98\xc1\xe0\x68\xe4\x03\xdd\xe2\x73\x15\xcd\xbe\xa3\x3c\xcb\x1b\x67\x7e\x0b\x89\x19\x9b\x3c\xf3\x3a\x8f\x27\x90\x70\x34\x80\xcb\x1f\x92\x63\x30\x50\xef\x48\xdb\x38\x5b\xbd\x18\xe8\x4b\x5a\x42\xd3\xa1\xc2\xf1\x75\x51\x01\x09\x7f\x19\xdc\x01\x15\x1a\x64\x6d\x34\xa8\x4e\x55\xeb\x8c\xba\x95\x1e\xd8\x3f\x69\x42\xdc\xb2\x9f\x9d\x0d\x56\xa0\x63\xa3\xed\xe8\xed\x90\xce\x93\xf6\xaa\x07\xff\x6c\x95\x7d\x4b\xdd\xf2\x7c\xb4\xf5\xf1\x5c\x37\x9b\xfe\x02\x00\x00\xff\xff\xef\x23\x7b\x1b\x16\x02\x00\x00")

func dslrunnerJsBytes() ([]byte, error) {
	return bindataRead(
		_dslrunnerJs,
		"dslrunner.js",
	)
}

func dslrunnerJs() (*asset, error) {
	bytes, err := dslrunnerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dslrunner.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dslrunner.js": dslrunnerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dslrunner.js": &bintree{dslrunnerJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

